<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!--redis连接配置-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <!-- <property name="maxActive" value="${redis.maxActive}"/>
         <property name="maxWait" value="${redis.maxWait}"/>-->
        <!--<property name="maxWaitMillis" value="${redis.maxWait}"/>-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="database" value="${redis.database}"/>
        <property name="timeout" value="${redis.timeout}"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory"/>
    </bean>

    <!--shiro配置-->
    <!-- 安全认证过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl"
                  value="${loginUrl}"/>
        <property name="unauthorizedUrl" value="/error.jsp"/>
        <property name="filters">
            <util:map>
                <entry key="cas" value-ref="casFilter"/>
                <entry key="rest" value-ref="rest"></entry>
                <entry key="logout" value-ref="logout"></entry>
                <entry key="authc" value-ref="authc"/>
                <entry key="roles" value-ref="roles"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions" value="${filterChainDefinitions}" />
    </bean>
    <!-- SecurityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- session管理 -->
        <property name="sessionManager" ref="sessionManager"></property>
        <property name="subjectFactory" ref="casSubjectFactory"/>
        <property name="realms">
            <list>
                <ref bean="casRealm"/>
            </list>
        </property>
    </bean>

    <!-- Session ID 生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>
    <!-- session管理 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 会话超时时间，单位：毫秒 -->
        <!--<property name="globalSessionTimeout" value="1800000"></property>-->
        <property name="deleteInvalidSessions" value="true"></property>
        <property name="sessionDAO" ref="sessionDao"></property>
        <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
        <property name="sessionIdCookie" ref="sharesession"/>
        <!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   -->
        <property name="sessionValidationInterval" value="${session.sessionTimeoutClean}"/>
        <!--<property name="sessionValidationSchedulerEnabled" value="true"/>-->
        <!--<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>-->
        <!--session事件监听器-->
        <property name="sessionListeners">
            <list>
                <ref bean="redisSessionListener"/>
            </list>
        </property>
    </bean>

    <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
    <bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- cookie的name,对应的默认是 JSESSIONID -->
        <constructor-arg value="${session.cookieName}"/>
        <!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
        <property name="path" value="/"/>
        <property name="httpOnly" value="true"/>
        <!--maxAge设置cookie有效时间,单位是秒-->
        <property name="maxAge" value="{$cookie.maxAge}"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--casRealm-->
    <bean id="casRealm" class="org.apache.shiro.cas.CasRealm">
        <property name="defaultRoles" value="${casRealm.roles}"/>
        <property name="casServerUrlPrefix" value="${casRealm.casServerUrlPrefix}"/>
        <property name="casService" value="${casRealm.casService}"/>
    </bean>

    <!--casSubjectFactory-->
    <bean id="casSubjectFactory" class="org.apache.shiro.cas.CasSubjectFactory"/>

    <!--CAS单点登录filter-->
    <bean id="casFilter" class="org.apache.shiro.cas.CasFilter">
        <property name="failureUrl" value="${casFilter.failureUrl}"/>
    </bean>

    <!--logout filter-->
    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="${logout.redirectUrl}"/>
    </bean>

    <!--authc filter-->
    <bean id="authc" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter"/>

    <!--roles filter-->
    <bean id="roles" class="org.apache.shiro.web.filter.authz.RolesAuthorizationFilter"/>

    <!--restful service filter-->
    <bean id="rest" class="org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter">
        <property name="loginUrl"
                  value="${loginUrl}"/>
    </bean>

</beans>
